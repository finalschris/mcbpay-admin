var dgram = require('dgram');
var EventEmitter = require('events').EventEmitter;

var Heartbeat = {};

Heartbeat.start = function(configs, handler) {
  configs = configs || {};
  configs.address = configs.address || 'localhost';
  configs.port = configs.port || 21790;

  var emitter = new EventEmitter;
  handler(emitter);

  var socket = dgram.createSocket("udp4");
  socket.bind(configs.port);

  socket.on("listening", function () {
  });

  //Notify nodes
  configs.nodes = configs.nodes || [];
  var delays = {};
  configs.nodes.forEach(function(node) {
    node.port = node.port || 21790;
    var pingMessage = new Buffer("ping " + node.address + ":" + node.port);
    socket.send(pingMessage, 0, pingMessage.length, node.port, node.address, function(err, bytes) {});
    delays[node.address + ":" + node.port] = { rinfo: {address: node.address, port: node.port}, delay: 0 };
    emitter.emit('ping', node);
    console.log(pingMessage.toString());
  });


  socket.on("message", function (message, rinfo) {
    if (Heartbeat.Helpers.isPing(message.toString())) {
      var heartbeatMessage = new Buffer("heartbeat " + configs.address + ":" + configs.port);
      setInterval(function() {
        socket.send(heartbeatMessage, 0, heartbeatMessage.length, rinfo.port, rinfo.address, function(err, bytes) {});
      }, 1000);
    } else {
      console.log(message + " from " + rinfo.address + ":" + rinfo.port);
      emitter.emit("heartbeat", message, rinfo);
    }
  });

  emitter.on('heartbeat', function(message, rinfo) {
    //Reset delay
    delays[rinfo.address + ":" + rinfo.port] = { rinfo: rinfo , delay: 0 };
  });

  setInterval(function() {
    for (var host in delays) {
      //Increase delay
      delays[host].delay++;
      //Announce delay
      if (delays[host].delay % 3 == 0) {
        console.log("no heartbeat from " + host + " for " + delays[host].delay + " sec");
        var pingMessage = new Buffer("ping " + delays[host].rinfo.address + ":" + delays[host].rinfo.port);
        socket.send(pingMessage, 0, pingMessage.length, delays[host].rinfo.port, delays[host].rinfo.address, function(err, bytes) {});
        emitter.emit('delay', delays[host]);
      }
    }
  }, 1000);

  return emitter;
};

Heartbeat.Helpers = {
  isPing: function(message) {
    return typeof(message) === 'string' && message.indexOf("ping") === 0;
  },
};

for (var property in Heartbeat) {
  exports[property] = Heartbeat[property];
};
